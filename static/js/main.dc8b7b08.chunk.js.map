{"version":3,"sources":["reducers.js","components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","props","name","email","id","className","src","alt","CardList","map","robot","key","username","Searchbox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","App","onRequestRobots","filteredRobots","filter","toLocaleLowerCase","includes","toLowerCase","onSearchChange","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dc8b7b08.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return (\r\n                {\r\n                    ...state,\r\n                     searchField: action.payload\r\n                 }\r\n             );\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {\r\n                ...state,\r\n                isPending: true\r\n            }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                robots: action.payload,\r\n                isPending: false\r\n            }\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {\r\n                ...state,\r\n                isPending: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction Card(props) {\r\n    const { name, email, id } = props;\r\n    return (\r\n        <div className='bg-light-blue tc dib br3 ma3 pa2 grow bw-2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}`} alt='robotpic'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nfunction CardList({ robots }) {\r\n    \r\n    return(\r\n        <div>\r\n            {robots.map(robot => {\r\n                return (\r\n                    <Card\r\n                        key={robot.id}\r\n                        id={robot.id}\r\n                        name={robot.name}\r\n                        username={robot.username}\r\n                        email={robot.email}\r\n                    />)\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nfunction Searchbox({ searchChange }) {\r\n    return (\r\n        <div>\r\n        <input\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search'\r\n            placeholder='search robots'\r\n            onChange={searchChange}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) =>  {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n        {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Ooops! That is not good.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/Cardlist.js';\r\nimport { connect } from 'react-redux';\r\nimport Searchbox from '../components/Searchbox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundary from '../components/ErrorBoundary.js';\r\nimport { setSearchField, requestRobots } from '../actions.js';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return({\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    })\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return ({\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    })\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    // onSearchChange = (event) => {\r\n    //     this.setState(\r\n    //         {\r\n    //             searchfield: event.target.value\r\n    //         }\r\n    //     )\r\n    // }\r\n\r\n    render() {\r\n        const filteredRobots = this.props.robots.filter(robot => {\r\n            return (robot.name.toLocaleLowerCase().includes(this.props.searchField.toLowerCase()))\r\n        });\r\n        return(\r\n            this.props.isPending ?\r\n            <h1>Loading</h1> :\r\n            <div className='tc'>\r\n            <h1 className='f1'>Robofriends</h1>\r\n            <Searchbox searchChange={this.props.onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundary>\r\n                    <CardList robots={filteredRobots}/>\r\n                </ErrorBoundary>\r\n            </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD } from './constants.js';\r\nimport { REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from './constants.js';\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: data\r\n    }))\r\n    .catch(err => dispatch({\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: err\r\n    }))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport  thunkMiddleware  from 'redux-thunk';\r\nimport { searchRobots, requestRobots } from './reducers.js';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger()\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}